<?xml version="1.0" encoding="utf-8" ?>

<help>
  <function>EMinTimeController</function>
  
  <info>
    Explicit minimum-time MPC controller
  </info>
  <syntax>ctrl = EMinTimeController(model)</syntax>

  <descr> 
    Constructs the explicit form of a minimum-time MPC controller by
    solving the following optimization problem parametrically:
    <latex>
      \begin{align*}
      \min N &amp;\\
      \text{s.t.}&amp; x(k+1) = f(x_k, u_k) \\
      &amp; x(N) \in T_{set} \\
      &amp; x(k) \in X\\
      &amp; u(k) \in U
      \end{align*}
    </latex>
    where <i>f(x_k, u_k)</i> represents the prediction model's
    state-update equation, <i>T_{set}</i> is a given terminal set, and 
    <i>X</i> and <i>U</i> denote, respectively, the state and input
    constraints.<br/>

    LTI, PWA, and MLD models are accepted for predictions.
    State and input constraint sets <i>X</i>, <i>U</i> are
    automatically created using the model's state and input
    constraints (<tt>model.x.min</tt>, <tt>model.x.max</tt>,
    <tt>model.u.min</tt>, <tt>model.u.max</tt>). The terminal set
    <i>T_{set}</i> is either taken from <tt>model.x.terminalSet</tt>
    or, if the field is empty, by calling
    <tt>model.stabizilingController()</tt> (for LTI systems only).<br/>

    Once computed, explicit minimum-time controllers inherit the
    behavior of the <tt>EMPCController</tt> class in terms of internal
    structure, evaluation and post-processing. See "<tt>help
    EMPCController</tt>" for more details.
  </descr>
  
  <input required="true">
      <name>model</name>
      <descr>Prediction model</descr> 
      <class name="AbstractSystem"/>
  </input>
  <output>
    <name>ctrl</name>
    <descr>Explicit minimum-time controller.</descr>    
	<class name="EMinTimeController"/>
  </output>

  <example>
    <descr>Create a 1D LTI system</descr>
    <cmd>sys = LTISystem('A', 1, 'B', 1, 'C', 1, 'D', 0)</cmd>

	<descr>Define constraints and quadratic cost function with unity weights</descr>
    <cmd>
		sys.x.min = -1; sys.x.max = 1;
		sys.u.min = -1; sys.u.max = 1;
		sys.x.penalty = QuadFunction(1);
		sys.u.penalty = QuadFunction(1);
	</cmd>

	<descr>Define a terminal set <i>T_{set} = \{ x \ | \ -0.1 \leq x
    \leq 0.1 \}</i> and construct the explicit minimum-time controller</descr>
    <cmd>
		sys.x.with('terminalSet');
		sys.x.terminalSet = Polyhedron('lb', -0.1, 'ub', 0.1);
		ctrl = EMinTimeController(sys)
	</cmd>

</example>

  <related>MinTimeControllerr</related>
  <related>EMPCController</related>


  <author macro="author_kvasnica"/>
  <license macro="GPL2"/>
</help>
